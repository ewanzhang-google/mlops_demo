steps:

# Run unit tests and code coverage
- name: 'python:3.9'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      pip install poetry \
      && poetry install \
      && poetry run pytest -m "unit" -s -v -c custom_pytest.ini -n auto --cov=training --cov-config=./coverage.ini --cov-report=term-missing --cov-fail-under=65 \
      && poetry run pytest -m "inte" -s -v -c custom_pytest.ini -n auto
  id: 'Tests'

# compile pipeline
- name: 'python:3.9-slim'
  entrypoint: 'bash'
  args:
      - '-c'
      - |
        pip install poetry \
        && poetry install --no-dev \
        && poetry run python -m training.pipelines.compile_pipeline -d ${_PIPELINE_PATH} -pn ${_PIPELINE_NAME}
  #waitFor: ['Tests']
  id: 'CompilePipeline'

# run pipeline
#- name: 'python:3.8-slim'
#  entrypoint: 'bash'
#  dir: 'training/pipelines'
#  args: ['pipeline_runner.sh', '${_PIPELINE_PATH}', '${_LOCATION}', '${_PIPELINE_PARAMS}', '${_PIPELINE_NAME}', '${PROJECT_ID}', '${_PIPELINE_ROOT}', '${_PIPELINE_RUN_NAME}', '${_SERVICE_ACCOUNT}']
#  waitFor: ['CompilePipeline']
#  id: 'RunPipeline'

timeout: 2100s

substitutions:
  _SERVICE_ACCOUNT: "vertex-pipeline-sa@${PROJECT_ID}.iam.gserviceaccount.com"
  _LOCATION: us-central1
  _PIPELINE_NAME: ${REPO_NAME}
  _PIPELINE_RUN_NAME: build-${SHORT_SHA}
  _PIPELINE_ROOT: "gs://${PROJECT_ID}/cloud_build_pipeline/${REPO_NAME}/${SHORT_SHA}"
  _PIPELINE_PATH: "gs://${PROJECT_ID}/cloud_build_pipeline/${REPO_NAME}/${SHORT_SHA}/training_pipeline.json"
  #_PIPELINE_PARAMS: '{"project_id":"${PROJECT_ID}","bq_uri":"uki-mlops-dev-demo.propensity_airlines.propensity_data","label":"label","assets_prefix":"prop-${SHORT_SHA}","location\":"us-central1"}'
  _PIPELINE_PARAMS: "{\"project_id\":\"${PROJECT_ID}\",\"bq_uri\":\"uki-mlops-dev-demo.propensity_airlines.propensity_data\",\"label\":\"label\",\"assets_prefix\":\"prop-${SHORT_SHA}\",\"location\":\"us-central1\"}"
