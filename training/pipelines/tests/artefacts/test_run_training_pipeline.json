{
  "pipelineSpec": {
    "components": {
      "comp-blessed-model-comp": {
        "executorLabel": "exec-blessed-model-comp",
        "inputDefinitions": {
          "artifacts": {
            "model_1": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "model_2": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "INT"
            }
          }
        }
      },
      "comp-bq-export-comp": {
        "executorLabel": "exec-bq-export-comp",
        "inputDefinitions": {
          "parameters": {
            "bq_uri": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "exported_dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-bt-comp": {
        "executorLabel": "exec-bt-comp",
        "inputDefinitions": {
          "artifacts": {
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "label": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics_class": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            },
            "metrics_params": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "report": {
              "artifactType": {
                "schemaTitle": "system.Markdown",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "path": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-deploy-gradient-boosting-model-1": {
        "dag": {
          "tasks": {
            "endpoint-create": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-endpoint-create"
              },
              "inputs": {
                "parameters": {
                  "display_name": {
                    "componentInputParameter": "pipelineparam--assets_prefix"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "Create Endpoint"
              }
            },
            "model-deploy": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-deploy"
              },
              "dependentTasks": [
                "endpoint-create",
                "model-upload"
              ],
              "inputs": {
                "artifacts": {
                  "endpoint": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "endpoint",
                      "producerTask": "endpoint-create"
                    }
                  },
                  "model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "model",
                      "producerTask": "model-upload"
                    }
                  }
                },
                "parameters": {
                  "automatic_resources_max_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "automatic_resources_min_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_accelerator_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_machine_type": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "n1-standard-4"
                      }
                    }
                  },
                  "dedicated_resources_max_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_min_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "traffic_split": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{\"0\": 100}"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Deploy Gradient Boosting Model to Endpoint"
              }
            },
            "model-upload": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-upload"
              },
              "inputs": {
                "parameters": {
                  "artifact_uri": {
                    "componentInputParameter": "pipelineparam--bt-comp-path"
                  },
                  "display_name": {
                    "componentInputParameter": "pipelineparam--assets_prefix"
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project_id"
                  },
                  "serving_container_args": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "serving_container_command": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "serving_container_environment_variables": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "serving_container_image_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "demo-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest"
                      }
                    }
                  },
                  "serving_container_ports": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Upload Gradient Boosting Model"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--assets_prefix": {
              "type": "STRING"
            },
            "pipelineparam--blessed-model-comp-Output": {
              "type": "INT"
            },
            "pipelineparam--bt-comp-path": {
              "type": "STRING"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-deploy-svm-blessed-model-2": {
        "dag": {
          "tasks": {
            "endpoint-create-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-endpoint-create-2"
              },
              "inputs": {
                "parameters": {
                  "display_name": {
                    "componentInputParameter": "pipelineparam--assets_prefix"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "Create Endpoint"
              }
            },
            "model-deploy-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-deploy-2"
              },
              "dependentTasks": [
                "endpoint-create-2",
                "model-upload-2"
              ],
              "inputs": {
                "artifacts": {
                  "endpoint": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "endpoint",
                      "producerTask": "endpoint-create-2"
                    }
                  },
                  "model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "model",
                      "producerTask": "model-upload-2"
                    }
                  }
                },
                "parameters": {
                  "automatic_resources_max_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "automatic_resources_min_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_accelerator_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_machine_type": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "n1-standard-4"
                      }
                    }
                  },
                  "dedicated_resources_max_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_min_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "traffic_split": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{\"0\": 100}"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Deploy SVM Model to Endpoint"
              }
            },
            "model-upload-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-upload-2"
              },
              "inputs": {
                "parameters": {
                  "artifact_uri": {
                    "componentInputParameter": "pipelineparam--svm-comp-path"
                  },
                  "display_name": {
                    "componentInputParameter": "pipelineparam--assets_prefix"
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "us-central1"
                      }
                    }
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project_id"
                  },
                  "serving_container_args": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "serving_container_command": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "serving_container_environment_variables": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "serving_container_image_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "demo-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest"
                      }
                    }
                  },
                  "serving_container_ports": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Upload SVM Model"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--assets_prefix": {
              "type": "STRING"
            },
            "pipelineparam--blessed-model-comp-Output": {
              "type": "INT"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            },
            "pipelineparam--svm-comp-path": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-data-split-comp": {
        "executorLabel": "exec-data-split-comp",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "seed": {
              "type": "INT"
            },
            "test_data_size": {
              "type": "DOUBLE"
            },
            "train_data_size": {
              "type": "DOUBLE"
            },
            "validation_data_size": {
              "type": "DOUBLE"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "validation_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-endpoint-create": {
        "executorLabel": "exec-endpoint-create",
        "inputDefinitions": {
          "parameters": {
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-endpoint-create-2": {
        "executorLabel": "exec-endpoint-create-2",
        "inputDefinitions": {
          "parameters": {
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-gen-stats-comp": {
        "executorLabel": "exec-gen-stats-comp",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "html_artifact": {
              "artifactType": {
                "schemaTitle": "system.HTML",
                "schemaVersion": "0.0.1"
              }
            },
            "json_artifact": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-deploy": {
        "executorLabel": "exec-model-deploy",
        "inputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "automatic_resources_max_replica_count": {
              "type": "INT"
            },
            "automatic_resources_min_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_accelerator_count": {
              "type": "INT"
            },
            "dedicated_resources_machine_type": {
              "type": "STRING"
            },
            "dedicated_resources_max_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_min_replica_count": {
              "type": "INT"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "traffic_split": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-deploy-2": {
        "executorLabel": "exec-model-deploy-2",
        "inputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "automatic_resources_max_replica_count": {
              "type": "INT"
            },
            "automatic_resources_min_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_accelerator_count": {
              "type": "INT"
            },
            "dedicated_resources_machine_type": {
              "type": "STRING"
            },
            "dedicated_resources_max_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_min_replica_count": {
              "type": "INT"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "traffic_split": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-upload": {
        "executorLabel": "exec-model-upload",
        "inputDefinitions": {
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "serving_container_args": {
              "type": "STRING"
            },
            "serving_container_command": {
              "type": "STRING"
            },
            "serving_container_environment_variables": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            },
            "serving_container_ports": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-upload-2": {
        "executorLabel": "exec-model-upload-2",
        "inputDefinitions": {
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "serving_container_args": {
              "type": "STRING"
            },
            "serving_container_command": {
              "type": "STRING"
            },
            "serving_container_environment_variables": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            },
            "serving_container_ports": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-svm-comp": {
        "executorLabel": "exec-svm-comp",
        "inputDefinitions": {
          "artifacts": {
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "label": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics_class": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            },
            "metrics_params": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "report": {
              "artifactType": {
                "schemaTitle": "system.Markdown",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "path": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-validate-stats-comp": {
        "executorLabel": "exec-validate-stats-comp",
        "inputDefinitions": {
          "artifacts": {
            "json_artifact": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-blessed-model-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "blessed_model_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef blessed_model_comp(\n    model_1: Input[Metrics],\n    model_2: Input[Metrics]\n) -> int:\n\n    if model_1.metadata['bt_f1_test_score']>model_2.metadata['svm_f1_test_score']:\n        return 1\n    else:\n        return 2\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-bq-export-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "bq_export_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.24.1' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef bq_export_comp(\n    bq_uri: str,\n    project: str,\n    location: str, # location of extract job - must match location of dataset\n    exported_dataset: Output[Dataset]\n    ) -> None:\n\n    from google.cloud import bigquery\n    import logging\n\n\n    if bq_uri.startswith('bq://'):\n        bq_uri = bq_uri[5:]\n\n    bq_project_id, bq_dataset_id, bq_table_id = bq_uri.split('.')\n\n    dataset_ref = bigquery.DatasetReference(bq_project_id, bq_dataset_id)\n    table_ref = dataset_ref.table(bq_table_id)\n\n\n    destination_uris = [\"{}/{}\".format(exported_dataset.uri, \"data_*.csv\")]\n\n    client = bigquery.Client(project=bq_project_id)\n\n    extract_job = client.extract_table(\n        source= table_ref,\n        destination_uris=destination_uris,\n        project=project,\n        location=location\n    )  # API request\n\n    extract_job.result()  # Waits for job to complete.\n\n    # TODO: Check that job did not error\n\n    logging.info(\n        \"Exported {}:{}.{} to {}\".format(\n            bq_project_id,\n            bq_dataset_id,\n            bq_table_id,\n            exported_dataset.uri)\n    )\n    return None\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-bt-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "bt_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas==1.3.5' 'numpy==1.21.5' 'scikit-learn==0.24.0' 'fsspec==2021.11.1' 'gcsfs==2021.11.1' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef bt_comp( \n    train_set: Input[Dataset], \n    test_set: Input[Dataset],\n    label: str,\n    model: Output[Model],\n    metrics_class: Output[ClassificationMetrics],\n    metrics_params: Output[Metrics],\n    report: Output[Markdown]\n)  -> NamedTuple(\n    'ModelPathOut',\n    [\n      ('path', str)\n    ]):\n\n\n    model.uri =  model.uri+\".pkl\"\n\n    import pandas as pd\n    import numpy as np\n\n    import os, pathlib\n\n    from sklearn.metrics import confusion_matrix\n    from sklearn.metrics import roc_curve\n    from sklearn.metrics import classification_report\n    from sklearn.metrics import f1_score\n    from sklearn.model_selection import cross_val_score\n\n    from sklearn.pipeline import make_pipeline, Pipeline\n    from sklearn.compose import ColumnTransformer\n    from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\n\n    from sklearn import ensemble\n\n    from typing import List\n\n    from collections import namedtuple\n    import pickle\n\n    ### Load data ###\n    train_df = pd.read_csv(train_set.uri)\n    train_df_label = train_df[label]\n    train_df = train_df.drop(columns=[label])\n\n    test_df = pd.read_csv(test_set.uri)\n    test_df_label = test_df[label]\n    test_df = test_df.drop(columns=[label])\n\n    dict_types = train_df.dtypes.to_dict()\n    CATEGORICAL_FEATURES = []\n    BINARY_FEATURES = []\n    NUMERIC_FEATURES = []\n\n    BINARY_FEATURES_IDX = []\n    NUMERIC_FEATURES_IDX = []\n    CATEGORICAL_FEATURES_IDX = []\n\n    indexer = 0\n    for k,v in dict_types.items():\n        if v==np.object_:\n            CATEGORICAL_FEATURES.append(k)\n            CATEGORICAL_FEATURES_IDX.append(indexer)\n        elif v==np.bool_:\n            BINARY_FEATURES.append(k)\n            BINARY_FEATURES_IDX.append(indexer)\n        else:\n            NUMERIC_FEATURES.append(k)\n            NUMERIC_FEATURES_IDX.append(indexer)\n\n        indexer+=1\n\n    ALL_COLUMNS = BINARY_FEATURES+NUMERIC_FEATURES+CATEGORICAL_FEATURES\n\n    #BINARY_FEATURES_IDX = list(range(0,len(BINARY_FEATURES)))\n    #NUMERIC_FEATURES_IDX = list(range(len(BINARY_FEATURES), len(BINARY_FEATURES)+len(NUMERIC_FEATURES)))\n    #CATEGORICAL_FEATURES_IDX = list(range(len(BINARY_FEATURES+NUMERIC_FEATURES), len(ALL_COLUMNS)))\n\n    preprocessor = ColumnTransformer(\n        transformers=[\n            ('bin', OrdinalEncoder(), BINARY_FEATURES_IDX),\n            ('num', StandardScaler(), NUMERIC_FEATURES_IDX),\n            ('cat', OneHotEncoder(handle_unknown='ignore'), CATEGORICAL_FEATURES_IDX)], n_jobs=-1)\n\n\n    model_params = {\"kernel\":\"linear\", \"C\":2, \"class_weight\":None}\n    model_params = {\n        \"n_estimators\": 1200,\n        \"max_depth\": 3,\n        \"subsample\": 0.5,\n        \"learning_rate\": 0.01,\n        \"min_samples_leaf\": 1,\n        \"random_state\": 3,\n    }\n    model_obj = ensemble.GradientBoostingClassifier(**model_params)\n\n    clf = Pipeline(steps=[ ('preprocessor', preprocessor),\n                          ('classifier', model_obj)])\n\n\n    #clf = pipeline_builder(model_params, BINARY_FEATURES_IDX, NUMERIC_FEATURES_IDX, CATEGORICAL_FEATURES_IDX)\n    score = cross_val_score(clf, train_df, train_df_label, cv=10, n_jobs=-1).mean()\n    clf.fit(train_df, train_df_label)\n\n\n    pred = clf.predict(test_df)\n    metrics_class.log_confusion_matrix([\"0\", \"1\"], confusion_matrix(test_df_label, pred).tolist())\n\n\n    pred_prob = clf.predict_proba(test_df)\n    fpr, tpr, thresholds = roc_curve(y_true=test_df_label, y_score=pred_prob[:,1], pos_label=test_df_label[0])\n    metrics_class.log_roc_curve(fpr, tpr, thresholds)\n\n    with open(report.path, 'w') as f:\n        f.write(classification_report(test_df_label,pred))\n\n\n    metrics_params.log_metric(\"bt_f1_test_score\", (f1_score(test_df_label, pred, pos_label=test_df_label[0])))\n    metrics_params.log_metric(\"bt_cross_val_score\", (score))\n\n    #pathlib.Path(model.path).mkdir(parents=True, exist_ok=True)\n    #joblib.dump(, model.path)\n    with open(model.path, 'wb') as handle:\n        pickle.dump(clf, handle)\n\n\n    output = namedtuple('ModelPathOut',\n        ['path'])\n\n    return output(model.uri.strip('/model.pkl'))\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-data-split-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "data_split_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'dask[dataframe]==2021.12.0' 'gcsfs==2021.11.1' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef data_split_comp(\n    dataset: Input[Dataset],\n    train_set: Output[Dataset],\n    validation_set: Output[Dataset],\n    test_set: Output[Dataset],\n    train_data_size: float  = 0.8,\n    validation_data_size: float = 0.1,\n    test_data_size: float = 0.1,\n    seed: int = 0\n) -> None:\n\n    if (train_data_size+validation_data_size+test_data_size!=1):\n        raise ValueError('Train, Validation and Test data splits should add up to 1. Training:{}, Validation:{}, Test:{}'.format(train_data_size, validation_data_size, test_data_size)) \n\n    import numpy as np \n    import dask.dataframe as dd\n    df = dd.read_csv(dataset.uri+\"/data_*.csv\")\n    df = df.compute()\n\n    np.random.seed(seed)\n    perm = np.random.permutation(df.index)\n    m = len(df.index)\n    train_end = int(train_data_size * m)\n    validate_end = int(validation_data_size * m) + train_end\n\n    train = df.iloc[perm[:train_end]]\n\n    validate = df.iloc[perm[train_end:validate_end]]\n    test = df.iloc[perm[validate_end:]]\n\n    train_set.uri = train_set.uri\n    validation_set.uri = validation_set.uri\n    test_set.uri = test_set.uri\n\n    train.to_csv(train_set.uri, index=False)\n    validate.to_csv(validation_set.uri, index=False)\n    test.to_csv(test_set.uri, index=False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-endpoint-create": {
          "container": {
            "args": [
              "--type",
              "CreateEndpoint",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"\", \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\":\"\"}, \"network\": \"\"}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-endpoint-create-2": {
          "container": {
            "args": [
              "--type",
              "CreateEndpoint",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"\", \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\":\"\"}, \"network\": \"\"}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-gen-stats-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "gen_stats_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas_profiling==3.1.0' 'dask[dataframe]==2021.12.0' 'gcsfs==2021.11.1' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef gen_stats_comp(\n        dataset: Input[Dataset],\n        html_artifact: Output[HTML],\n        json_artifact: Output[Artifact]\n) -> None:\n\n    from pandas_profiling import ProfileReport\n\n    import dask.dataframe as dd\n    df = dd.read_csv(dataset.uri+\"/data_*.csv\")\n    df = df.compute()\n\n    profile = ProfileReport(df, title=\"Pandas Profiling Report\", explorative=True)\n\n    print(html_artifact.path)\n    profile.to_file(html_artifact.path)\n\n    with open(json_artifact.path, 'w') as f:\n        f.write(profile.to_json())\n\n    return\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-model-deploy": {
          "container": {
            "args": [
              "--type",
              "DeployModel",
              "--payload",
              "{\"endpoint\": \"{{$.inputs.artifacts['endpoint'].metadata['resourceName']}}\", \"traffic_split\": {{$.inputs.parameters['traffic_split']}}, \"deployed_model\": {\"model\": \"{{$.inputs.artifacts['model'].metadata['resourceName']}}\", \"dedicated_resources\": {\"machine_spec\": {\"machine_type\": \"{{$.inputs.parameters['dedicated_resources_machine_type']}}\", \"accelerator_type\": \"\", \"accelerator_count\": {{$.inputs.parameters['dedicated_resources_accelerator_count']}}}, \"min_replica_count\": {{$.inputs.parameters['dedicated_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['dedicated_resources_max_replica_count']}}}, \"automatic_resources\": {\"min_replica_count\": {{$.inputs.parameters['automatic_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['automatic_resources_max_replica_count']}}}, \"service_account\": \"\", \"disable_container_logging\": \"\", \"enable_access_logging\": \"\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}}}",
              "--project",
              "",
              "--location",
              "",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-model-deploy-2": {
          "container": {
            "args": [
              "--type",
              "DeployModel",
              "--payload",
              "{\"endpoint\": \"{{$.inputs.artifacts['endpoint'].metadata['resourceName']}}\", \"traffic_split\": {{$.inputs.parameters['traffic_split']}}, \"deployed_model\": {\"model\": \"{{$.inputs.artifacts['model'].metadata['resourceName']}}\", \"dedicated_resources\": {\"machine_spec\": {\"machine_type\": \"{{$.inputs.parameters['dedicated_resources_machine_type']}}\", \"accelerator_type\": \"\", \"accelerator_count\": {{$.inputs.parameters['dedicated_resources_accelerator_count']}}}, \"min_replica_count\": {{$.inputs.parameters['dedicated_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['dedicated_resources_max_replica_count']}}}, \"automatic_resources\": {\"min_replica_count\": {{$.inputs.parameters['automatic_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['automatic_resources_max_replica_count']}}}, \"service_account\": \"\", \"disable_container_logging\": \"\", \"enable_access_logging\": \"\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}}}",
              "--project",
              "",
              "--location",
              "",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-model-upload": {
          "container": {
            "args": [
              "--type",
              "UploadModel",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"\", \"predict_schemata\": {\"instance_schema_uri\": \"\", \"parameters_schema_uri\": \"\", \"prediction_schema_uri\": \"\"}, \"container_spec\": {\"image_uri\": \"{{$.inputs.parameters['serving_container_image_uri']}}\", \"command\": {{$.inputs.parameters['serving_container_command']}}, \"args\": {{$.inputs.parameters['serving_container_args']}}, \"env\": {{$.inputs.parameters['serving_container_environment_variables']}}, \"ports\": {{$.inputs.parameters['serving_container_ports']}}, \"predict_route\": \"\", \"health_route\": \"\"}, \"artifact_uri\": \"{{$.inputs.parameters['artifact_uri']}}\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}, \"encryption_spec\": {\"kms_key_name\":\"\"}, \"labels\": {{$.inputs.parameters['labels']}}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-model-upload-2": {
          "container": {
            "args": [
              "--type",
              "UploadModel",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"\", \"predict_schemata\": {\"instance_schema_uri\": \"\", \"parameters_schema_uri\": \"\", \"prediction_schema_uri\": \"\"}, \"container_spec\": {\"image_uri\": \"{{$.inputs.parameters['serving_container_image_uri']}}\", \"command\": {{$.inputs.parameters['serving_container_command']}}, \"args\": {{$.inputs.parameters['serving_container_args']}}, \"env\": {{$.inputs.parameters['serving_container_environment_variables']}}, \"ports\": {{$.inputs.parameters['serving_container_ports']}}, \"predict_route\": \"\", \"health_route\": \"\"}, \"artifact_uri\": \"{{$.inputs.parameters['artifact_uri']}}\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}, \"encryption_spec\": {\"kms_key_name\":\"\"}, \"labels\": {{$.inputs.parameters['labels']}}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-svm-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "svm_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas==1.3.5' 'numpy==1.21.5' 'scikit-learn==0.24.0' 'fsspec==2021.11.1' 'gcsfs==2021.11.1' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef svm_comp( \n    train_set: Input[Dataset], \n    test_set: Input[Dataset],\n    label: str,\n    model: Output[Model],\n    metrics_class: Output[ClassificationMetrics],\n    metrics_params: Output[Metrics],\n    report: Output[Markdown]\n)  -> NamedTuple(\n    'ModelPathOut',\n    [\n      ('path', str)\n    ]):\n\n\n    model.uri =  model.uri+\".pkl\"\n\n    import pandas as pd\n    import numpy as np\n\n    import os, pathlib\n\n    from sklearn.metrics import confusion_matrix\n    from sklearn.metrics import roc_curve\n    from sklearn.metrics import classification_report\n    from sklearn.metrics import f1_score\n    from sklearn.model_selection import cross_val_score\n\n    from sklearn.pipeline import make_pipeline, Pipeline\n    from sklearn.compose import ColumnTransformer\n    from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\n\n    from sklearn.svm import SVC\n\n    from typing import List\n\n    from collections import namedtuple\n    import pickle\n\n    ### Load data ###\n    train_df = pd.read_csv(train_set.uri)\n    train_df_label = train_df[label]\n    train_df = train_df.drop(columns=[label])\n\n    test_df = pd.read_csv(test_set.uri)\n    test_df_label = test_df[label]\n    test_df = test_df.drop(columns=[label])\n\n    dict_types = train_df.dtypes.to_dict()\n    CATEGORICAL_FEATURES = []\n    BINARY_FEATURES = []\n    NUMERIC_FEATURES = []\n    BINARY_FEATURES_IDX = []\n    NUMERIC_FEATURES_IDX = []\n    CATEGORICAL_FEATURES_IDX = []\n\n    indexer = 0\n    for k,v in dict_types.items():\n        if v==np.object_:\n            CATEGORICAL_FEATURES.append(k)\n            CATEGORICAL_FEATURES_IDX.append(indexer)\n        elif v==np.bool_:\n            BINARY_FEATURES.append(k)\n            BINARY_FEATURES_IDX.append(indexer)\n        else:\n            NUMERIC_FEATURES.append(k)\n            NUMERIC_FEATURES_IDX.append(indexer)\n\n        indexer+=1\n\n    ALL_COLUMNS = BINARY_FEATURES+NUMERIC_FEATURES+CATEGORICAL_FEATURES\n\n    #BINARY_FEATURES_IDX = list(range(0,len(BINARY_FEATURES)))\n    #NUMERIC_FEATURES_IDX = list(range(len(BINARY_FEATURES), len(BINARY_FEATURES)+len(NUMERIC_FEATURES)))\n    #CATEGORICAL_FEATURES_IDX = list(range(len(BINARY_FEATURES+NUMERIC_FEATURES), len(ALL_COLUMNS)))\n\n\n    preprocessor = ColumnTransformer(\n        transformers=[\n            ('bin', OrdinalEncoder(), BINARY_FEATURES_IDX),\n            ('num', StandardScaler(), NUMERIC_FEATURES_IDX),\n            ('cat', OneHotEncoder(handle_unknown='ignore'), CATEGORICAL_FEATURES_IDX)], n_jobs=-1)\n\n\n    model_params = {\"kernel\":\"linear\", \"C\":2, \"class_weight\":None, \"probability\": True}\n\n    model_obj = SVC()\n    model_obj.set_params(**model_params)\n\n    clf = Pipeline(steps=[ ('preprocessor', preprocessor),\n                          ('classifier', model_obj)])\n\n\n    #clf = pipeline_builder(model_params, BINARY_FEATURES_IDX, NUMERIC_FEATURES_IDX, CATEGORICAL_FEATURES_IDX)\n    score = cross_val_score(clf, train_df, train_df_label, cv=10, n_jobs=-1).mean()\n    clf.fit(train_df, train_df_label)\n\n\n    pred = clf.predict(test_df)\n    metrics_class.log_confusion_matrix([\"0\", \"1\"], confusion_matrix(test_df_label, pred).tolist())\n\n\n    pred_prob = clf.predict_proba(test_df)\n    fpr, tpr, thresholds = roc_curve(y_true=test_df_label, y_score=pred_prob[:,1], pos_label=test_df_label[0])\n    metrics_class.log_roc_curve(fpr, tpr, thresholds)\n\n    with open(report.path, 'w') as f:\n        f.write(classification_report(test_df_label,pred))\n\n    metrics_params.log_metric(\"svm_f1_test_score\", (f1_score(test_df_label, pred, pos_label=test_df_label[0])))\n    metrics_params.log_metric(\"svm_cross_val_score\", (score))\n\n    #pathlib.Path(model.path).mkdir(parents=True, exist_ok=True)\n    with open(model.path, 'wb') as handle:\n        pickle.dump(clf, handle)\n\n\n    output = namedtuple('ModelPathOut',\n        ['path'])\n\n    return output(model.uri.strip('/model.pkl'))\n\n"
            ],
            "image": "python:3.9",
            "resources": {
              "cpuLimit": 4.0,
              "memoryLimit": 15.032385536
            }
          }
        },
        "exec-validate-stats-comp": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "validate_stats_comp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas_profiling==3.1.0' 'dask[dataframe]==2021.12.0' 'gcsfs==2021.11.1' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef validate_stats_comp(\n        json_artifact: Input[Artifact]\n) -> None:\n\n    import json\n\n    with open(json_artifact.path, 'r') as f:\n        data=f.read()\n\n    # parse file\n    obj = json.loads(data)\n    print(obj['alerts'])\n\n    return\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "test-pipeline-coffee"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "bt-comp-metrics_class": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics_class",
                  "producerSubtask": "bt-comp"
                }
              ]
            },
            "bt-comp-metrics_params": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics_params",
                  "producerSubtask": "bt-comp"
                }
              ]
            },
            "svm-comp-metrics_class": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics_class",
                  "producerSubtask": "svm-comp"
                }
              ]
            },
            "svm-comp-metrics_params": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics_params",
                  "producerSubtask": "svm-comp"
                }
              ]
            }
          }
        },
        "tasks": {
          "blessed-model-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-blessed-model-comp"
            },
            "dependentTasks": [
              "bt-comp",
              "svm-comp"
            ],
            "inputs": {
              "artifacts": {
                "model_1": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "metrics_params",
                    "producerTask": "bt-comp"
                  }
                },
                "model_2": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "metrics_params",
                    "producerTask": "svm-comp"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Select Best Model"
            }
          },
          "bq-export-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bq-export-comp"
            },
            "inputs": {
              "parameters": {
                "bq_uri": {
                  "componentInputParameter": "bq_uri"
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "Export Data from BQ"
            }
          },
          "bt-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bt-comp"
            },
            "dependentTasks": [
              "data-split-comp"
            ],
            "inputs": {
              "artifacts": {
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "test_set",
                    "producerTask": "data-split-comp"
                  }
                },
                "train_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "train_set",
                    "producerTask": "data-split-comp"
                  }
                }
              },
              "parameters": {
                "label": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "label"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Train Gradient Boosting Model"
            }
          },
          "condition-deploy Gradient Boosting model-1": {
            "componentRef": {
              "name": "comp-condition-deploy-gradient-boosting-model-1"
            },
            "dependentTasks": [
              "blessed-model-comp",
              "bt-comp"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--assets_prefix": {
                  "componentInputParameter": "assets_prefix"
                },
                "pipelineparam--blessed-model-comp-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "blessed-model-comp"
                  }
                },
                "pipelineparam--bt-comp-path": {
                  "taskOutputParameter": {
                    "outputParameterKey": "path",
                    "producerTask": "bt-comp"
                  }
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "condition-deploy Gradient Boosting model-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--blessed-model-comp-Output'].int_value == 1"
            }
          },
          "condition-deploy SVM blessed model-2": {
            "componentRef": {
              "name": "comp-condition-deploy-svm-blessed-model-2"
            },
            "dependentTasks": [
              "blessed-model-comp",
              "svm-comp"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--assets_prefix": {
                  "componentInputParameter": "assets_prefix"
                },
                "pipelineparam--blessed-model-comp-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "blessed-model-comp"
                  }
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                },
                "pipelineparam--svm-comp-path": {
                  "taskOutputParameter": {
                    "outputParameterKey": "path",
                    "producerTask": "svm-comp"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "condition-deploy SVM blessed model-2"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--blessed-model-comp-Output'].int_value == 2"
            }
          },
          "data-split-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-data-split-comp"
            },
            "dependentTasks": [
              "bq-export-comp",
              "validate-stats-comp"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "exported_dataset",
                    "producerTask": "bq-export-comp"
                  }
                }
              },
              "parameters": {
                "seed": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "test_data_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": 0.2
                    }
                  }
                },
                "train_data_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": 0.8
                    }
                  }
                },
                "validation_data_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": 0.0
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Split Dataset"
            }
          },
          "gen-stats-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-gen-stats-comp"
            },
            "dependentTasks": [
              "bq-export-comp"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "exported_dataset",
                    "producerTask": "bq-export-comp"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Generate Statistics"
            }
          },
          "svm-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-svm-comp"
            },
            "dependentTasks": [
              "data-split-comp"
            ],
            "inputs": {
              "artifacts": {
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "test_set",
                    "producerTask": "data-split-comp"
                  }
                },
                "train_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "train_set",
                    "producerTask": "data-split-comp"
                  }
                }
              },
              "parameters": {
                "label": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "label"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Train SVM Model"
            }
          },
          "validate-stats-comp": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-validate-stats-comp"
            },
            "dependentTasks": [
              "gen-stats-comp"
            ],
            "inputs": {
              "artifacts": {
                "json_artifact": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "json_artifact",
                    "producerTask": "gen-stats-comp"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Validate Statistics"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "assets_prefix": {
            "type": "STRING"
          },
          "bq_uri": {
            "type": "STRING"
          },
          "label": {
            "type": "STRING"
          },
          "location": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "bt-comp-metrics_class": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          },
          "bt-comp-metrics_params": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "svm-comp-metrics_class": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          },
          "svm-comp-metrics_params": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.11"
  },
  "runtimeConfig": {}
}
